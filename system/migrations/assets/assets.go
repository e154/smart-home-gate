// Code generated by go-bindata.
// sources:
// migrations/20181223_231535_add_variables.sql
// migrations/20190616_231520_add_server.sql
// migrations/20190620_201618_add_mobile.sql
// DO NOT EDIT!

package database

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations20181223_231535_add_variablesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd0\xb1\x6e\xea\x30\x14\xc6\xf1\xdd\x4f\xf1\x6d\x80\xee\xcd\x52\x89\x89\xc9\x24\x46\x8d\x6a\x08\x8d\x9d\xaa\x74\xa9\x4c\x7c\x54\xac\x9a\x24\x4a\x1c\xe0\xf1\xab\x08\x52\xd1\xa5\xea\x19\xad\xff\xe7\xe1\x17\x45\xf8\x77\x74\x1f\xad\x09\x84\xa2\x61\x51\x04\xf5\x2c\xe1\x2a\x74\x54\x06\x57\x57\x98\x14\xcd\x04\xae\x03\x5d\xa8\xec\x03\x59\x9c\x0f\x54\x21\x1c\x5c\x87\xeb\x6e\x88\x5c\x07\xd3\x34\xde\x91\x65\x71\x2e\xb8\x16\xd0\x7c\x29\x05\x4e\xa6\x75\x66\xef\xa9\xc3\x94\x01\x95\x39\x12\xae\xf7\xc2\xf3\xf8\x91\xe7\xd3\x87\xf9\x7c\x86\x4d\xa6\xb1\x29\xa4\xc4\x36\x4f\xd7\x3c\xdf\xe1\x49\xec\xfe\x33\xe0\x64\x7c\x7f\x1b\x04\xba\x04\x8c\x37\xf6\x43\x63\xfa\x50\xfb\xda\x58\x00\xcb\x2c\x93\x82\x6f\x90\x88\x15\x2f\xa4\xc6\x8a\x4b\x25\x86\xa6\x6c\xc9\x04\xb2\xef\x26\x40\xa7\x6b\xa1\x34\x5f\x6f\xf5\xdb\xcf\x7f\xfa\xc6\xfe\xda\xb0\xd9\x82\xb1\x7b\xac\xa4\x3e\x57\x23\xd7\xb7\xd5\xf0\xf8\x27\xad\xb6\xf6\x9e\x2c\xf6\xa6\xfc\x64\x49\x9e\x6d\x6f\x5e\xe9\x0a\xe2\x35\x55\x5a\xdd\xc9\xc5\x5c\xc5\x3c\x11\x0b\xc6\xbe\x02\x00\x00\xff\xff\x9c\x2c\xcd\x5b\xac\x01\x00\x00")

func migrations20181223_231535_add_variablesSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20181223_231535_add_variablesSql,
		"migrations/20181223_231535_add_variables.sql",
	)
}

func migrations20181223_231535_add_variablesSql() (*asset, error) {
	bytes, err := migrations20181223_231535_add_variablesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20181223_231535_add_variables.sql", size: 428, mode: os.FileMode(420), modTime: time.Unix(1560521754, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20190616_231520_add_serverSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x6e\xc2\x30\x10\x45\xf7\x3e\xc5\xdf\x41\xd5\xe6\x04\xac\x0c\x71\x2b\xab\x21\x40\x6c\x4b\xd0\x4d\x94\xc6\xa3\x62\x41\x9d\x34\x36\xa5\xc7\xaf\x42\x08\xaa\xba\xa8\x3a\xcb\xd1\xfb\x9a\x3f\x2f\x49\x70\xff\xee\xde\xba\x2a\x12\x4c\xcb\x92\x04\x6a\x93\xc1\x79\x04\xaa\xa3\x6b\x3c\x26\xa6\x9d\xc0\x05\xd0\x17\xd5\xa7\x48\x16\xe7\x3d\x79\xc4\xbd\x0b\x18\x72\x3d\xe4\x02\xaa\xb6\x3d\x3a\xb2\x6c\x51\x08\xae\x05\x34\x9f\x67\x02\x81\xba\x4f\xea\x02\x9b\x32\x00\x70\x16\xe3\xcc\xe5\x93\x12\x85\xe4\x19\xd6\x85\x5c\xf2\x62\x87\x67\xb1\x7b\xb8\x50\xb1\x39\x90\x1f\x28\x63\x64\x3a\x26\xf2\x95\x46\x6e\xb2\x6c\x80\xea\x8e\xaa\x48\xb6\xac\x22\xb4\x5c\x0a\xa5\xf9\x72\xad\x5f\x7e\x41\xa7\xd6\xfe\x05\x31\x76\x37\x63\x63\x5f\x93\xcb\x8d\x11\x90\x79\x2a\xb6\x43\x85\xb2\xf1\xe5\xb5\x7f\x79\xf2\x1f\x58\xe5\xe3\x3b\x98\x5e\x80\x3e\xfd\x53\x5f\xda\x9c\xfd\x28\xf0\x66\xaf\x5f\xfe\xcb\x5f\xd7\x1c\x8f\x64\xf1\x5a\xd5\x07\x96\x16\xab\xf5\xd5\xa0\x7c\x84\xd8\x4a\xa5\xd5\xed\xf8\x82\xab\x05\x4f\xc5\x8c\xb1\xef\x00\x00\x00\xff\xff\xeb\xcc\x02\x1f\xbc\x01\x00\x00")

func migrations20190616_231520_add_serverSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20190616_231520_add_serverSql,
		"migrations/20190616_231520_add_server.sql",
	)
}

func migrations20190616_231520_add_serverSql() (*asset, error) {
	bytes, err := migrations20190616_231520_add_serverSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20190616_231520_add_server.sql", size: 444, mode: os.FileMode(420), modTime: time.Unix(1561128311, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations20190620_201618_add_mobileSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xc1\x6e\xe2\x30\x14\x45\xf7\xfe\x8a\xbb\x03\x34\x93\xcd\x6c\x59\x99\xc4\x20\x6b\x42\x60\x6c\x47\x1a\xba\x89\x42\xfc\x5a\x2c\x42\x12\xc5\xa6\xf4\xf3\xab\x34\xa4\xad\x2a\x55\xaa\x57\xd6\xf5\x79\xba\xf2\x79\x51\x84\x5f\x17\xf7\xd4\x97\x81\x90\x77\x2c\x8a\xa0\xff\xa5\x70\x0d\x3c\x55\xc1\xb5\x0d\x66\x79\x37\x83\xf3\xa0\x17\xaa\xae\x81\x2c\x6e\x27\x6a\x10\x4e\xce\x63\x9c\x1b\x20\xe7\x51\x76\x5d\xed\xc8\xb2\x58\x09\x6e\x04\x0c\x5f\xa5\x02\x97\xf6\xe8\x6a\xf2\x6c\xce\x00\xc0\x59\x4c\x67\x25\x37\x5a\x28\xc9\x53\xec\x95\xdc\x72\x75\xc0\x5f\x71\xf8\xfd\x46\x79\xea\x9f\xa9\x2f\x06\x78\x25\x37\x32\x33\x6c\x1a\x8a\x77\x99\x36\x8a\xcb\xcc\x4c\xd0\x9f\x62\xbc\xf8\xe2\xf1\x0c\x25\xd6\x42\x89\x2c\x16\xfa\xfe\xec\x31\x77\x76\x81\xb6\xc1\xb5\xb3\xc3\x07\xab\xd2\x57\xa5\xa5\x21\xb1\x54\xd3\x47\x32\x36\x87\xf6\x4c\xcd\x58\x95\xe7\x32\x99\x6a\xb3\x9d\x41\x96\xa7\xe9\x08\x55\x3d\x95\x81\x6c\x51\x06\x18\xb9\x15\xda\xf0\xed\xde\x3c\x7c\x81\xc6\xbe\x6f\x21\xc6\x16\x4b\xc6\x3e\xab\x4f\xda\x5b\x33\xc9\x7f\x37\x3f\x84\x3f\x72\xdf\xb7\x75\x4d\x16\xc7\xb2\x3a\xb3\x44\xed\xf6\x77\xfb\x72\x0d\xf1\x5f\x6a\xa3\xa7\x3d\x20\xe6\x3a\xe6\x89\x58\x32\xf6\x1a\x00\x00\xff\xff\xf1\x17\x8c\xb8\xf8\x01\x00\x00")

func migrations20190620_201618_add_mobileSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations20190620_201618_add_mobileSql,
		"migrations/20190620_201618_add_mobile.sql",
	)
}

func migrations20190620_201618_add_mobileSql() (*asset, error) {
	bytes, err := migrations20190620_201618_add_mobileSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/20190620_201618_add_mobile.sql", size: 504, mode: os.FileMode(420), modTime: time.Unix(1561036752, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/20181223_231535_add_variables.sql": migrations20181223_231535_add_variablesSql,
	"migrations/20190616_231520_add_server.sql": migrations20190616_231520_add_serverSql,
	"migrations/20190620_201618_add_mobile.sql": migrations20190620_201618_add_mobileSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"20181223_231535_add_variables.sql": &bintree{migrations20181223_231535_add_variablesSql, map[string]*bintree{}},
		"20190616_231520_add_server.sql": &bintree{migrations20190616_231520_add_serverSql, map[string]*bintree{}},
		"20190620_201618_add_mobile.sql": &bintree{migrations20190620_201618_add_mobileSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

